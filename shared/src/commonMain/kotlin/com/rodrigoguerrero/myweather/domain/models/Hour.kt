package com.rodrigoguerrero.myweather.domain.models

import com.rodrigoguerrero.myweather.data.remote.models.dtos.HourDto

data class Hour(
    val timeEpoch: Long,
    val time: String,
    val temperatureInCelsius: Double,
    val temperatureInFahrenheit: Double,
    val isDay: Int,
    val condition: Condition,
    val windSpeedMph: Double,
    val windSpeedKph: Double,
    val windDirectionDegrees: Int,
    val windDirection: String,
    val pressureMb: Double,
    val pressureInches: Double,
    val precipitationMm: Double,
    val precipitationInches: Double,
    val humidity: Int,
    val cloudCoverage: Int,
    val feelsLikeTemperatureInCelsius: Double,
    val feelsLikeTemperatureInFahrenheit: Double,
    val windchillTemperatureInCelsius: Double,
    val windchillTemperatureInFahrenheit: Double,
    val heatIndexCelsius: Double,
    val heatIndexFahrenheit: Double,
    val dewPointCelsius: Double,
    val dewPointFahrenheit: Double,
    val willItRain: Int,
    val chanceOfRain: Int,
    val willItSnow: Int,
    val chanceOfSnow: Int,
    val visibilityKm: Double,
    val visibilityMiles: Double,
    val windGustMph: Double,
    val windGustKph: Double,
    val uvIndex: Double,
    val airQuality: AirQuality?,
)

internal fun HourDto.toDomain() = Hour(
    timeEpoch = timeEpoch,
    time = time,
    temperatureInCelsius = temperatureInCelsius,
    temperatureInFahrenheit = temperatureInFahrenheit,
    isDay = isDay,
    condition = condition.toDomain(),
    windSpeedMph = windSpeedMph,
    windSpeedKph = windSpeedKph,
    windDirectionDegrees = windDirectionDegrees,
    windDirection = windDirection,
    pressureMb = pressureMb,
    pressureInches = pressureInches,
    precipitationMm = precipitationMm,
    precipitationInches = precipitationInches,
    humidity = humidity,
    cloudCoverage = cloudCoverage,
    feelsLikeTemperatureInCelsius = feelsLikeTemperatureInCelsius,
    feelsLikeTemperatureInFahrenheit = feelsLikeTemperatureInFahrenheit,
    windchillTemperatureInCelsius = windchillTemperatureInCelsius,
    windchillTemperatureInFahrenheit = windchillTemperatureInFahrenheit,
    heatIndexCelsius = heatIndexCelsius,
    heatIndexFahrenheit = heatIndexFahrenheit,
    dewPointCelsius = dewPointCelsius,
    dewPointFahrenheit = dewPointFahrenheit,
    willItRain = willItRain,
    chanceOfSnow = chanceOfSnow,
    willItSnow =  willItSnow,
    visibilityKm = visibilityKm,
    visibilityMiles = visibilityMiles,
    windGustKph = windGustKph,
    windGustMph = windGustMph,
    uvIndex = uvIndex,
    airQuality = airQuality?.toDomain(),
    chanceOfRain = chanceOfRain,
)
